CREATE TABLE "role_user" (
  "id" int PRIMARY KEY NOT NULL,
  "name_role" varchar(40) NOT NULL
);

CREATE TABLE "categories" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "name" varchar(40) NOT NULL
);

CREATE TABLE "courses" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "title" varchar(30) NOT NULL,
  "description" varchar(250) NOT NULL,
  "level" varchar(30) NOT NULL,
  "category_id" int NOT NULL,
  "teacher" int NOT NULL
);

CREATE TABLE "users" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "name" varchar(30) NOT NULL,
  "email" varchar(40) NOT NULL,
  "password" varchar(30) NOT NULL,
  "age" int NOT NULL,
  "role_id" int NOT NULL
);

CREATE TABLE "videos" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "title" varchar(50) NOT NULL,
  "url" varchar(250) NOT NULL,
  "course_id" int NOT NULL
);

CREATE TABLE "user_courses" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "user_id" int NOT NULL,
  "course_id" int NOT NULL
);



ALTER TABLE "user_courses" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "user_courses" ADD FOREIGN KEY ("course_id") REFERENCES "courses" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("role_id") REFERENCES "role_user" ("id");

ALTER TABLE "courses" ADD FOREIGN KEY ("category_id") REFERENCES "categories" ("id");

ALTER TABLE "videos" ADD FOREIGN KEY ("course_id") REFERENCES "courses" ("id");

ALTER TABLE "courses" ADD FOREIGN KEY ("teacher") REFERENCES "users" ("id");

-------------------inserts-----------------------
INSERT INTO role_user (id, name_role)
VALUES
(1, 'Student'),
(2, 'Teacher'),
(3, 'Admin');


INSERT INTO users (name,email, password, age, role_id )
VALUES
('Gerardo', 'gerardo@gmail.com', '1234', 35, 1);

INSERT INTO users (name,email, password, age, role_id )
VALUES
('Joel', 'Joel@gmail.com', '123', 29, 1);

INSERT INTO users (name,email, password, age, role_id )
VALUES
('Ian Rosas', 'Ian@gmail.com', '12345', 33, 2);



INSERT INTO categories (name)
VALUES 
('Programacion'), ('Server');

--impedir que students creen cursos--

CREATE OR REPLACE FUNCTION check_role()
RETURNS TRIGGER AS $$
 DECLARE
     user_role_id int;
BEGIN
    SELECT 
        u.role_id 
    INTO 
        user_role_id
    FROM users u
    WHERE 
        u.id = NEW.teacher; 
    IF user_role_id > 1 THEN
        RETURN NEW;
    ELSE
        RAISE EXCEPTION 'El usuario no tiene permiso para crear cursos.';
    END IF;
END;
$$ LANGUAGE plpgsql;
 

CREATE TRIGGER check_the_role
BEFORE INSERT ON courses
FOR EACH ROW
EXECUTE FUNCTION check_role();

-- crear el resto de tablas -----------------


INSERT INTO courses (title, description, level, category_id, teacher) 
VALUES
('JavaScript', 'Fundaments of JavaScript', 'Basic', 1, 3);

INSERT INTO courses (title, description, level, category_id, teacher) 
VALUES
('Node', 'servers with node', 'intermediate', 2, 3);



INSERT INTO videos (title, url, course_id)
VALUES
('JavaScript Fundaments', 'https://www.youtube.com/watch?v=Z4TuS0HEJP8', 1);

INSERT INTO videos (title, url, course_id)
VALUES
('Server with node', 'https://www.youtube.com/watch?v=VShtPwEkDD0', 2);

INSERT INTO videos (title, url, course_id)
VALUES
('Arrays with javaScript', 'https://www.youtube.com/watch?v=Z4TuS0HEJP8', 1);


INSERT INTO user_courses (user_id, course_id)
VALUES
(1, 1),(2,2);

--- consultas de prueba----

SELECT 
    u.name AS user_name,
    th.name AS teacher_name, 
    ARRAY_AGG(v.title) AS video_titles
FROM 
    users u
JOIN 
    user_courses uc ON u.id = uc.user_id
JOIN 
    courses c ON uc.course_id = c.id
JOIN 
    users th ON th.id = c.teacher
JOIN
    videos v ON v.course_id = c.id
WHERE 
    c.id = 1
GROUP BY
  u.name, th.name;
---consulta alumnos, maestros, categoria y videos del curso 1

SELECT
    u.name AS user_name,
    c.title AS course_title,
    th.name AS teacher_name, 
    c.level AS course_level,
    c.description AS course_description,
    cat.name AS category_name,
    ARRAY_AGG(v.title) AS video_titles
FROM
    users u
JOIN
    user_courses uc ON u.id = uc.user_id
JOIN
    courses c ON uc.course_id = 1
JOIN 
    users th ON th.id = c.teacher
JOIN
    videos v ON v.course_id = c.id
JOIN
    categories cat ON c.category_id = cat.id
WHERE
    c.id = 1
GROUP BY
  u.name, c.title, th.name, c.level, c.description, cat.name;

---consulta alumnos, maestros, categoria y videos del curso 2


SELECT
    u.name AS user_name,
    c.title AS course_title,
    th.name AS teacher_name, 
    c.level AS course_level,
    c.description AS course_description,
    cat.name AS category_name,
    ARRAY_AGG(v.title) AS video_titles
FROM
    users u
JOIN
    user_courses uc ON u.id = uc.user_id
JOIN
    courses c ON uc.course_id = 2
JOIN 
    users th ON th.id = c.teacher
JOIN
    videos v ON v.course_id = c.id
JOIN
    categories cat ON c.category_id = cat.id
WHERE
    c.id = 2
GROUP BY
  u.name, c.title, th.name, c.level, c.description, cat.name;
